{"version":3,"sources":["components/Card.js","components/CardList.js","data/courses.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","_ref","courseid","name","react_default","a","createElement","className","alt","src","CardList","courses","map","item","i","components_Card","key","prerequisites","term","description","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","searchfiled","target","value","state","_this$state","filterCourse","filter","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_CardList","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_containers_App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3dd4c454.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({courseid, name}) => {\n\treturn(\n\t\t<div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t<img alt='courses' src='https://i.guim.co.uk/img/media/a2ae8cfe64bde752295471eef91494dfcbd1bec7/0_449_6500_3901/master/6500.jpg?width=300&quality=85&auto=format&fit=max&s=7e91e6e0258dd2915ee63cb20ba13772' />\n\t\t\t<div>\n\t\t\t\t<h2>{courseid}</h2>\n\t\t\t\t<p>{name}</p>\n\t\t\t</div>\n\t\t</div>\n\t\t);\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList =({courses}) =>{\n\treturn(\n\t\t<div>\n\t\t{\n\t\t\tcourses.map((item,i)=>{\n\t\t\treturn (\n\t\t\t\t<Card \n\t\t\t\t\tkey={i} \n\t\t\t\t\tcourseid={courses[i].courseid} \n\t\t\t\t\tname={courses[i].name}\n\t\t\t\t/>\n\t\t\t\t);\n\t\t\t})\n\t\t}\n\t\t</div>\n\t\t);\n}\n\nexport default CardList;\n","export const courses =\n[\n {\n   \"courseid\": \"BINF6111\",\n   \"name\": \"Genome Informatics Workshop\",\n   \"prerequisites\": \"\",\n   \"term\": 2,\n   \"description\": \"Engineering software systems for managing and analysing large datasets derived from genomics experiments is a key application of bioinformatics. This course revolves around a guided team project for the design and implementation of a complex system bringing together a variety of tools and methods for analysing genomic data. Methodologies for requirement gathering, system design, project management and documentation will be applied. The project work will be complemented by lectures on algorithms for biological sequence analysis that form the basis of the project work\"\n },\n {\n   \"courseid\": \"BINF6112\",\n   \"name\": \"Bioinformatics Project B\",\n   \"prerequisites\": \"\",\n   \"term\": 3,\n   \"description\": \"Through a practical software project and targeted lectures this course examines various issues in the design and implementation of software systems for the analysis of large complex biological datasets and the application of mathematical and statistical methods to problems in modern life science. Example domains include analysis of gene expression and function, networks of interaction, and systems modeling\"\n },\n {\n   \"courseid\": \"BINF9010\",\n   \"name\": \"Applied Bioinformatics\",\n   \"prerequisites\": \"\",\n   \"term\": 2,\n   \"description\": \"Bioinformatics methods and data generated or analysed by these methods are of increasing importance in the biological sciences. This course explores the algorithms, assumptions, applications and limitations of a number of bioinformatics methods used for DNA and protein sequence analysis, biomolecular structure prediction and analysis, and functional genomics including microarray data analysis. Practical work emphasises the use and applications of standard bioinformatics tools and databases.  Assumed knowledge: Fundamentals of molecular biology, Introductory statistics and probability. Computer programming skills not necessary. <br /><br />The course is targeted at students with a biology background. Students without knowledge of molecular biology foundations may find the course difficult. Some readings will be provided at the start of the course for these students.<br /><br />This course does not require programming, however it does involve the use of Linux\"\n },\n {\n   \"courseid\": \"COMP4121\",\n   \"name\": \"Advanced & Parallel Algorithms\",\n   \"prerequisites\": \"Prerequisite: COMP9101 or COMP9801.\",\n   \"term\": 3,\n   \"description\": \"Topics chosen from: Spatial, semi-structured and multi-dimensional data storage and manipulation techniques, non Von-Neumann techniques, advanced and parallel algorithmic techniques, algorithm engineering and problem solving practices; algorithms for matrices and systems of linear equations, approximation algorithms, FFT and convolution and their software and circuit implementations, iteration methods for the solution of operator equations\"\n },\n {\n   \"courseid\": \"COMP4141\",\n   \"name\": \"Theory of Computation\",\n   \"prerequisites\": \"Prerequisite: COMP9020 and COMP9024\",\n   \"term\": 2,\n   \"description\": \"Computability: formal languages and problems, Turing Machines (TMs), computability, (semi-)decidability, universal TMs, Church-Turing thesis, halting problem, reduction and undecidability proofs, examples; Complexity: run time, space, complexity classes, non-determinism and NP, polynomial reductions and NP completeness, optimisation problems and approximation, randomisation; Languages and Automata: regular expressions and languages, finite automata, determinisation, context-free grammars and languages (CFLs), Chomsky normal form, word problems, pumping lemma, push-down automata, decidability problems for CFLs; Semantics and Correctness: while programs, assertions and program correctness, Hoare logic, loops and loop invariants, relative completeness of Hoare logic (and its role in a proof of G���del's incompleteness result\"\n },\n {\n   \"courseid\": \"COMP4161\",\n   \"name\": \"Advanced Verification\",\n   \"prerequisites\": \"Prerequisite: Completion of 48 UOC\",\n   \"term\": 3,\n   \"description\": \"This course is about mechanical proof assistants, how they work, and what they can be used for.  It presents specification and proof techniques used in industrial grade theorem provers, teaches the theoretical background to the techniques involved, and shows how to use a theorem prover to conduct formal proofs in practice.  The courses is intended to bring third/fourth year and postgraduate students into contact with the current research topics in the field of theorem proving and automated deduction and to teach them the necessary skills to successfully use industrial grade verification environments in modelling and verification.<br /><br />Topics covered included:  higher order logic, natural deduction, lambda calculus, term rewriting, data types and recursive functions, induction principles, calculational reasoning, mathematical proofs, decision procedures for a variety of logical domains, and proofs about programs.<br /><br />Note: experience with (first-order) logic and functional programming is required\"\n },\n {\n   \"courseid\": \"COMP4418\",\n   \"name\": \"Knowledge Representation\",\n   \"prerequisites\": \"Prerequisite: COMP9414 or COMP9814\",\n   \"term\": 3,\n   \"description\": \"Knowledge Representation and Reasoning (KRR) is at the core of Artificial Intelligence. It is concerned with the representation of knowledge in symbolic form and the use of this knowledge  for reasoning. This course presents current trends and research issues in Knowledge Representation and Reasoning (KRR). It enables students interested in Artificial Intelligence to deepen their  knowledge in this important area and gives them a solid background for doing their own work/research in this area. The topics covered in more detail are AI Logics, Probablilistic  Reasoning, Constraints, and Game Theory\"\n },\n {\n   \"courseid\": \"COMP4511\",\n   \"name\": \"User Interface Design & Constr\",\n   \"prerequisites\": \"Prerequisite: a mark of at least 70 in COMP9511 and a mark of at least 65 in COMP9021\",\n   \"term\": 1,\n   \"description\": \"This course is a project-based course designed to build on the basic skills acquired in COMP3511 ̢���� Human Computer Interaction. The course addresses the skills and knowledge required in industry to brainstorm, design, implement, and evaluate an application through the user-centred design process. Because this is an iterative process, students will be required to build their interface at least three times, starting with a low-fidelity prototype and building to high-fidelity and more complete prototypes. By the end of the course, students should have a solid understanding of the importance of user-centred design and how it is applied in the industry to design, test and build a functioning application.<br /><br />The course is built to reflect up-to-date industry practice and methods. You would have benefitted from also completing COMP2911, which introduces you to object-oriented techniques, UML and design patterns. Whilst you will be coding in this course to build an iteration of your application, this is not the focus of the course, which remains on design practices and testing of graphical user interfaces\"\n },\n {\n   \"courseid\": \"COMP6324\",\n   \"name\": \"IoT Services Engineering\",\n   \"prerequisites\": \"Prerequisite: COMP9021 and COMP9311\",\n   \"term\": 1,\n   \"description\": \"This course aims to introduce the students to core concepts and practical skills for designing and engineering IoT services and applications. Specifically, the course aims to expose students to IoT business strategy, requirements, IoT technologies, solution design and implementation\"\n },\n {\n   \"courseid\": \"COMP6441\",\n   \"name\": \"Security Engineering\",\n   \"prerequisites\": \"Prerequisite: Completion of 48 UOC\",\n   \"term\": 2,\n   \"description\": \"Introduction to computer security, prevention of cybercrime and cyberterror. The principles of engineering secure systems. How to think like a security engineer.<br /><br />Engineering secure systems. How security fails. Security analysis and design. Private and public cryptographic protocols. Introduction to information security: Confidentiality, Integrity, Authentication, Non-repudiation, hashing, signatures, bits of security. Physical security, social engineering, sniffing, intrusion detection, prevention and response, firewalls, honeypots. Overview of vulnerabilities and exploits including areas such as buffer overflow, inter overflow, heap attacks, Return-Oriented-Programming, heap attacks. Principles of risk and security. Case studies drawn from the history of hacking and from current events.<br /><br />Additional topics drawn from recent developments and current research in applied computer security.<br /><br />There are numerous formative assessments and activities throughout the course to provide feedback and learning opportunities. These do not directly contribute to your final grade but are expected to be used to provide evidence of your capabilities in your portfolio.<br /><br />A programming background is not required but it will be helpful in some of the more applied topics. Students need a keen devious and analytical mind. To get the most from this course students will need to engage in independent study and research and be able to act as independent self-directed learners\"\n },\n {\n   \"courseid\": \"COMP6443\",\n   \"name\": \"Web Application Security\",\n   \"prerequisites\": \"Prerequisite: COMP6441 or COMP6841 or COMP9441\",\n   \"term\": 3,\n   \"description\": \"Web applications are currently the predominant source of software vulnerabilities exploited in in online attacks. There is a growing need and growing demand for web programmers to be security aware.<br /><br />This course covers the main types of web application vulnerabilities and current best practice professional coding and testing practices to be able to successfully develop secure web applications.<br /><br />The course covers OWASP vulnerabilities cross site scripting browser security model and weaknesses Injection attacks DNS Man in the middle Data leakage Spoofing UI and Social vulnerabilities Assurance and Testing Standards. Course coverage will be constantly updated over time to reflect emerging vulnerabilities and practices.<br /><br />A programming background is not required but it will be helpful in some of the more applied topics. Students need a keen devious and analytical mind. To get the most from this course students will need to engage in independent study and research and be able to act as independent self directed learners\"\n },\n {\n   \"courseid\": \"COMP6445\",\n   \"name\": \"Digital Forensics\",\n   \"prerequisites\": \"Prerequisite: COMP6441 or COMP6841 or COMP9441, and COMP9201 or COMP9283\",\n   \"term\": 1,\n   \"description\": \"This course addresses the skills and knowledge needed by first responders to a discovered cyber breech, as well as law enforcement and criminal justice.<br /><br />This course covers both forensic theory / professional practice, and looking at the underlying engineering of hiding, finding, interpreting and responding to traces. Students will use of standard forensic tools to extract carve and analyse data as well as learning the low level technical skills and knowledge underlying them. By the end of the course students should be able to write and analyse simple forensic tools as well as being able to use them.<br /><br />The course covers Memory Forensics, Disc Forensics Network, Device Forensics, Stealth Techniques, Anti-forensics, Professional Forensic Practice, (chain of custody, records etc), Logging. Course coverage will be constantly updated over time to reflect emerging forensic practice and methods\"\n },\n {\n   \"courseid\": \"COMP6447\",\n   \"name\": \"Security Assessment\",\n   \"prerequisites\": \"Prerequisite: A mark of at least 65 in COMP6841, or a mark of at least 75 in COMP6441 or COMP9441\",\n   \"term\": 2,\n   \"description\": \"This course looks at cyber attack and defence. Students learn how to assess and identify vulnerabilities and how vulnerabilities are exploited. Students learn the principles and theory of exploitation, the common security models, and how approaches to exploitation and defence have evolved over time.<br /><br />Students from this course will engage in war games competitions,  analyse real world case studies of vulnerabilities in complex software used on widespread systems, and gain an understanding of the technical process of finding and fixing low-level software vulnerabilities and also of the economics and causal factors involved with their real world use.<br /><br />The course covers techniques and skills including vulnerability classes, Source code auditing Fuzzing Security Bugs Software Security Assurance Taint Analysis Memory Corruption, Overflows, Return Oriented Programming  Course coverage will be constantly updated over time to reflect emerging attack and defence methods. <br /><br />There are numerous formative assessments and activities throughout the course to provide feedback and learning opportunities.  These do not directly contribute to your final grade but are expected to be used to provide evidence of your capabilities in your portfolio. <br /><br />Students need a keen devious and analytical mind.  To get the most from this course students will need to engage in independent study and research and be able to act as independent self directed learners\"\n },\n {\n   \"courseid\": \"COMP6448\",\n   \"name\": \"Security Masterclass\",\n   \"prerequisites\": \"Prerequisite: COMP6841\",\n   \"term\": 1,\n   \"description\": \"This is an occasional course that will involve a visiting expert in the security area giving a series of lectures and workshops on an advanced topic in cyber security. The precise timing and topics depend on the visitor. The course will be run in intensive mode\"\n },\n {\n   \"courseid\": \"COMP6714\",\n   \"name\": \"Info Retrieval and Web Search\",\n   \"prerequisites\": \"Prerequisite: (COMP9020 and COMP9021) or COMP9024\",\n   \"term\": 3,\n   \"description\": \"Information Retrieval:  (a) Document modeling (b) Inverted index construction and compression (c)Vector space model and ranking methods (d) Probabilistic and language models (e) Evaluation methods (f) Relevance feedback and query expansion.<br /><br />Web Search:  (a) Web search engine architecture (b) Web crawling and indexing (c) Web structure and usage analytics.<br /><br />The lecture materials will be complemented by projects and assignments\"\n },\n {\n   \"courseid\": \"COMP6733\",\n   \"name\": \"Internet of Things\",\n   \"prerequisites\": \"Prerequisite: 65 WAM and COMP9331\",\n   \"term\": 3,\n   \"description\": \"Internet of Things (IoT) will play a key role in the next frontier of computing. The new course will provide an experimental approach to cover fundamental design principles behind building IoT applications, with hands-on experience with a popular end-to-end IoT platform.Topics covered will include a selection from: IoT technology and services, IoT system architecture, Low Power communications (Bluetooth Low Energy and 6LoWPAN) and security issues, sensors and sensor data smoothing and filtering, light-weight in-situ machine learning and data fusion, inertial sensing, activity recognition and fitness morning, voice-based stress level sensing, biometric authentication, anonymity, cloud services for IoT. This course assumes familiarity with a high level programming language such as Java and Python AND a low level programming language such as C\"\n },\n {\n   \"courseid\": \"COMP6741\",\n   \"name\": \"Parameterized & Exact Comp.\",\n   \"prerequisites\": \"Prerequisite: COMP9101 or COMP9801.\",\n   \"term\": 3,\n   \"description\": \"The course focuses on algorithms for exactly solving NP-hard computational problems. Since no polynomial time algorithm is known for any of these problems, the running time of the algorithms will have a super-polynomial dependence on the input size or some other parameter of the input.<br /><br /><br />The first part presents algorithmic techniques to solve NP-hard problems provably faster than brute-force in the worst case, such as branching algorithms, dynamic programming across subsets, inclusion-exclusion, local search, and measure & conquer. We will also see lower bounds for algorithms and how to rule out certain running times assuming the (Strong) Exponential Time Hypothesis.<br /><br /><br />Whereas the first part presents \\\"default\\\" algorithms that one would use without knowing much about the instances one is about to solve, the second part acknowledges that the complexity of an instance does not only depend on its size n. A parameter k is associated with each instance and the parameterized complexity framework aims at designing fixed-parameter algorithms whose running times are f(k)*poly(n) for a computable function f. This gives efficient algorithms for small values of the parameter obtained via techniques such as branching, colour coding, iterative compression, and kernelization (preprocessing). We will also see problems that are not fixed-parameter tractable and not kernelizable to polynomial kernels subject to complexity-theoretic assumptions\"\n },\n {\n   \"courseid\": \"COMP6752\",\n   \"name\": \"Modelling Concurrent Systems\",\n   \"prerequisites\": \"Prerequisite: COMP9024.\",\n   \"term\": 1,\n   \"description\": \"This course tries to make students familiar with state-of-the-art techniques in modelling concurrent systems. This is done by comparing some of the more successful models of concurrency found in the literature. The focus will be on the rationale behind the design decisions underlying those models, viewed from philosophical, mathematical and computational perspectives. The course contains important background knowledge for students aiming at a scientific career in which the design of mathematical models of system behaviour is a component.<br /><br />Topics chosen from: semantic models of concurrent and distributed systems (e.g. process algebra, event structures, Petri nets, Chu spaces), operational and denotational semantics, semantic equivalences and implementation relations, linear versus branching time, interleaving versus partial order semantics, true concurrency, algorithms for equivalence checking and their complexity, modal and temporal logic for concurrent systems\"\n },\n {\n   \"courseid\": \"COMP6841\",\n   \"name\": \"Extended Security Engineering\",\n   \"prerequisites\": \"Prerequisite: COMP9024.\",\n   \"term\": 2,\n   \"description\": \"Introduction to computer security, cybercrime, and cyberterror. The principles of engineering secure systems. How to think like a security engineer.<br /><br />Engineering secure systems. How security fails. Security analysis and design. Private and public cryptographic protocols. Introduction to information security: Confidentiality, Integrity, Authentication, Non-repudiation, hashing, signatures, bits of security. Physical security, social engineering, sniffing, intrusion detection, prevention and response, firewalls, honeypots. Overview of vulnerabilities and exploits including areas such as buffer overflow, inter overflow, heap attacks, Return-Oriented-Programming, heap attacks. Principles of risk and security. Case studies drawn from the history of hacking and from current events.<br /><br />Additional topics drawn from recent developments and current research in applied computer security.<br /><br />There are numerous formative assessments and activities throughout the course to provide feedback and learning opportunities. These do not directly contribute to your final grade but are expected to be used to provide evidence of your capabilities in your portfolio.<br /><br />A programming background is required , especially for the more applied topics. Students need a keen devious and analytical mind. To get the most from this course students will need to engage in independent study and research and be able to act as independent self-directed learners.<br /><br />This is the extended version of COMP6441. In addition to the COMP6441 material above, this course includes coverage of reversing x86 machine code into C/C++ and an introduction to malware decomposition and analysi\"\n },\n {\n   \"courseid\": \"COMP6843\",\n   \"name\": \"Extended WebApp Security\",\n   \"prerequisites\": \"Prerequisite: COMP6441 or COMP6841 or COMP9441\",\n   \"term\": 3,\n   \"description\": \"Web applications are currently the predominant source of software vulnerabilities exploited in in online attacks. There is a growing need and growing demand for web programmers to be security aware.<br /><br />This course covers the main types of web application vulnerabilities and current best practice professional coding and testing practices to be able to successfully develop secure web applications.<br /><br />The course covers OWASP vulnerabilities cross site scripting browser security model and weaknesses Injection attacks DNS Man in the middle Data leakage Spoofing UI and Social vulnerabilities Assurance and Testing Standards. Course coverage will be constantly updated over time to reflect emerging vulnerabilities and practices.<br /><br />There are numerous formative assessments and activities throughout the course to provide feedback and learning opportunities. These do not directly contribute to your final grade but are expected to be used to provide evidence of your capabilities in your portfolio.<br /><br />A programming background is required. Students also need a keen devious and analytical mind. To get the most from this course students will need to engage in independent study and research and be able to act as independent self directed learners.<br /><br />This is the extended version of COMP6443. This course includes the material of COMP6443 plus penetration testing, and red teaming. Students will work in teams to conduct penetration tests and report on them to real and simulated clients\"\n },\n {\n   \"courseid\": \"COMP6845\",\n   \"name\": \"Extended Digital Forensics\",\n   \"prerequisites\": \"Prerequisite: COMP6441 or COMP6841 or COMP9441, and COMP9201 or COMP9283\",\n   \"term\": 1,\n   \"description\": \"This course addresses the skills and knowledge needed by first responders to a discovered cyber breech, as well as law enforcement and criminal justice.<br /><br />This course covers both forensic theory / professional practice, and looking at the underlying engineering of hiding, finding, interpreting and responding to traces. Students will use of standard forensic tools to extract carve and analyse data as well as learning the low level technical skills and knowledge underlying them. By the end of the course students should be able to write and analyse simple forensic tools as well as being able to use them.<br /><br />The course covers Memory Forensics, Disc Forensics Network, Device Forensics, Stealth Techniques, Anti-forensics, Professional Forensic Practice, (chain of custody, records etc), Logging. Course coverage will be constantly updated over time to reflect emerging forensic practice and methods.<br /><br />This is the extended version of COMP6445. This course includes the material of COMP6445 plus malware analysis and incident response\"\n },\n {\n   \"courseid\": \"COMP9020\",\n   \"name\": \"Foundations of Comp. Science\",\n   \"prerequisites\": \"\",\n   \"term\": 1,\n   \"description\": \"Scope:  <br />* Mathematical methods for designing correct and efficient programs.<br />* Mathematics for algorithm analysis.<br />* Logic for proving and verification.<br />Topics:<br /> * Introduction to set and relation theory<br />* Propositional logic and boolean algebras<br />* Induction, recursion and recurrence relations<br />* Order of growth of functions.<br />* Structured counting (combinatorics)<br />* Discrete probability<br />* Graph theory<br />* Trees for algorithmic application\"\n },\n {\n   \"courseid\": \"COMP9021\",\n   \"name\": \"Principles of Programming\",\n   \"prerequisites\": \"\",\n   \"term\": 3,\n   \"description\": \"This is a first programming course. It provides an introduction to programming in Python and covers the following essentials:<br /><br />Program design and implementation in a high level language, with procedural and object oriented constructs and some functional features. Fundamental programming techniques, data structures and algorithms. Debugging and testing. Simulation. Applications in different areas, including those involving graphical user interfaces and animations\"\n },\n {\n   \"courseid\": \"COMP9024\",\n   \"name\": \"Data Structures & Algorithms\",\n   \"prerequisites\": \"Prerequisite: COMP9021\",\n   \"term\": 1,\n   \"description\": \"Data types and data structures: abstractions and representations; lists, stacks, queues, heaps, graphs; dictionaries and hash tables; search trees; searching and sorting algorithms\"\n },\n {\n   \"courseid\": \"COMP9032\",\n   \"name\": \"Microprocessors & Interfacing\",\n   \"prerequisites\": \"Corequisite:  COMP9021.\",\n   \"term\": 3,\n   \"description\": \"Instruction Set Architecture (ISA), floating point number representation, computer arithmetic, assembly and machine language programming, machine language fundamentals; addressing modes; instruction repertoire, assembly language programming methodology, interrupts and I/O interfacing (hardware and software), serial communication, timers, analog input and output, converting analog signals to digital signals (data acquisition), taking input from a variety of sensors and driving actuators, buses and memory system, low level device drivers\"\n },\n {\n   \"courseid\": \"COMP9044\",\n   \"name\": \"Software Construction\",\n   \"prerequisites\": \"\",\n   \"term\": 2,\n   \"description\": \"\"\n },\n {\n   \"courseid\": \"COMP9101\",\n   \"name\": \"Design &Analysis of Algorithms\",\n   \"prerequisites\": \"Prerequisite: COMP9021\",\n   \"term\": 2,\n   \"description\": \"Techniques for design and performance analysis of algorithms for a variety of computational problems. Asymptotic notations, bounding summations, recurrences, best-case, worst-case and average-case analysis. Design techniques: divide-and-conquer, dynamic programming and memorisation, greedy strategy, backtracking, branch-and-bound. Algorithms: sorting and order statistics, trees, graphs and flow networks, matrices, arithmetic circuits. Intractability: classes P, NP, and NP-completeness, approximation algorithms\"\n },\n {\n   \"courseid\": \"COMP9102\",\n   \"name\": \"Programming Lang & Compilers\",\n   \"prerequisites\": \"Prerequisite: COMP9024.\",\n   \"term\": 1,\n   \"description\": \"Covers the fundamental principles in programming languages and implementation techniques for compilers (emphasis on compiler front ends).  Course contents include:  program syntax and semantics, formal translation of programming languages, finite-state recognisers and regular expressions, context-free parsing techniques such as LL(k) and LR(k), attribute grammars, syntax-directed translation, type checking and code generation.  Lab:  implementation of a compiler in a modern programming language for a small programming language\"\n },\n {\n   \"courseid\": \"COMP9153\",\n   \"name\": \"Algorithmic Verification\",\n   \"prerequisites\": \"Prerequisite: COMP9024.\",\n   \"term\": 1,\n   \"description\": \"<b>This course replaces COMP4151, students can not receive credit for both</b><br /><br />It is virtually impossible to guarantee the correctness of a system, and in turn the absense of bugs by standard software engineering practice such as code review, systematic testing and good software design alone.  The formal methods community has developed various rigorous, mathematically sound techniques and tools that allow the automatic analysis of systems and software.  The application of these fully automatic techniques is typically called algorithmic verification.<br /><br />The course will describe several automatic verification techniques, the algoriths they are based on, and the tools that support them.  We will discuss examples to which the techniques have been applied, and provide experience with the use of several tools\"\n },\n {\n   \"courseid\": \"COMP9154\",\n   \"name\": \"Foundations of Concurrency\",\n   \"prerequisites\": \"Prerequisite: COMP9024 - Data Structures and Algorithms (Postgraduate)\",\n   \"term\": 2,\n   \"description\": \"\"\n },\n {\n   \"courseid\": \"COMP9164\",\n   \"name\": \"Concepts of Programming Lang.\",\n   \"prerequisites\": \"\",\n   \"term\": 3,\n   \"description\": \"\"\n },\n {\n   \"courseid\": \"COMP9201\",\n   \"name\": \"Operating Systems\",\n   \"prerequisites\": \"Prerequisite: COMP9024 and COMP9032.\",\n   \"term\": 1,\n   \"description\": \"Operating system organisation and services. Process management: scheduling, synchronisation and communication. Memory management: virtual memory, paging and segmentation. Storage management: Disk scheduling, file systems. Protection and Security. Distributed operating systems and file systems. Case studies drawn from UNIX, MS-DOS, Mach. Lab. programming assignments\"\n },\n {\n   \"courseid\": \"COMP9211\",\n   \"name\": \"Computer Architecture\",\n   \"prerequisites\": \"Prerequisite: COMP9222.\",\n   \"term\": 1,\n   \"description\": \"Study the architecture & organisation of modern processors, and influences upon these, with emphasis on pipelined RISC machines; gain understanding of the design of the memory subsystem, I/O, and system level interconnect; become proficient in the use of tools such as VHDL and SimpleScalar for the description, simulation, and verification of architectural designs; complete a series of assignments leading to the design, implementation, validation and assessment of a RISC system. It is assumed students are familiar with combinational and sequential logic design principles and have some experience in the use of CAD tools to describe and simulate digital systems\"\n },\n {\n   \"courseid\": \"COMP9222\",\n   \"name\": \"Digital Circuits and Systems\",\n   \"prerequisites\": \"Prerequisite: COMP9032.\",\n   \"term\": 3,\n   \"description\": \"This course aims to provide students with a knowledge of problem solving with digital systems (computer systems and digital circuits). The basic building blocks of combinational and sequential circuits are introduced to develop circuit solutions to problems and to understand and implement the design and operation of hardware models of digital and computer systems. HDLs will be used to describe circuits and state of the art computer aided design tools will be used to design complex systems\"\n },\n {\n   \"courseid\": \"COMP9242\",\n   \"name\": \"Advanced Operating Systems\",\n   \"prerequisites\": \"Prerequisite: a mark of at least 75 in either COMP9201 or COMP9283.\",\n   \"term\": 2,\n   \"description\": \"Covers operating systems design and implementation issues at an advanced level, focussing on specific issues such as performance and on current OS research areas. Topics selected from: Microkernels; user-level servers; performance; kernel implementation; device drivers; scheduling for real-time; effects and control of hardware caches; security and protection; persistent systems; security; dealing with large, sparse address spaces; experimental systems. A laboratory running a state-of-the-art microkernal system will be used to provide hands-on experience with low-level implementation of OS components\"\n },\n {\n   \"courseid\": \"COMP9243\",\n   \"name\": \"Distributed Systems\",\n   \"prerequisites\": \"Prerequisite: COMP9201 or COMP9283, and COMP9331.\",\n   \"term\": 3,\n   \"description\": \"A detailed coverage of distributed systems, with a particular focus on  operating systems issues: client-server paradigm, remote-procedure call as OS support for client-server; distributed shared memory, distributed memory coherency; distributed file systems; distributed process management, including load sharing and process migration; concurrency  control; fault tolerance, recoverability and distributed transactions; naming; industry standards; case studies\"\n },\n {\n   \"courseid\": \"COMP9283\",\n   \"name\": \"Ext Operating Systems\",\n   \"prerequisites\": \"Prerequisite: a mark of at least 70 in COMP9032 and COMP9024.\",\n   \"term\": 1,\n   \"description\": \"As for COMP9201 Operating Systems but in greater depth and breadth\"\n },\n {\n   \"courseid\": \"COMP9311\",\n   \"name\": \"Database Systems\",\n   \"prerequisites\": \"Corequisite:  COMP9021.\",\n   \"term\": 1,\n   \"description\": \"A first course on database management systems. Data modelling;  principles of database design; data manipulation languages; database application techniques; introduction to DBMS internals; introduction to advanced databases. Lab: design and implementation of a database application using SQL and stored procedures\"\n },\n {\n   \"courseid\": \"COMP9313\",\n   \"name\": \"Big Data Management\",\n   \"prerequisites\": \"Prerequisite: COMP9024 and COMP9311\",\n   \"term\": 3,\n   \"description\": \"This course introduces the core concepts and technologies involved in managing Big Data. Topics include: characteristics of Big Bata and Big Data analysis, storage systems (e.g. HDFS, S3), techniques for manipulating Big Data (e.g. MapReduce, streaming, compression), programming languages (e.g. Spark, PigLatin), query languages (e.g. Jaql, Hive), database systems (e.g. noSQL systems, HBase), and typical applications (e.g. recommender systems, dimensionality reduction, text analysis)\"\n },\n {\n   \"courseid\": \"COMP9315\",\n   \"name\": \"Database Systems Implementat'n\",\n   \"prerequisites\": \"Prerequisite: COMP9024 and COMP9311.\",\n   \"term\": 2,\n   \"description\": \"Detailed examination of techniques used in the implementation of relational, object-oriented and distributed database systems. Topics are drawn from: query optimisation, transaction management, advanced file access methods, database performance tuning\"\n },\n {\n   \"courseid\": \"COMP9318\",\n   \"name\": \"Data Warehousing & Data Mining\",\n   \"prerequisites\": \"Prerequisite: COMP9020 and COMP9024 and COMP9311\",\n   \"term\": 1,\n   \"description\": \"Data Warehouse: (a) Data Model for Data Warehouses. (b) Implementing Data Warehouses: data  extraction,  cleansing,  transformation  and  loading,  data  cube  computation,  materialized  view  selection, OLAP query processing. Data Mining: (a) Fundamentals: data mining process and system  architecture, relationship with data warehouse and OLAP systems, data pre-processing. (b) Mining  Techniques  and  Application:  association  rules,  mining  spatial  databases,  mining  multimedia  databases, web mining, mining sequence and time-series data, text mining, etc.    The lecture materials will be complemented by projects /assignments\"\n },\n {\n   \"courseid\": \"COMP9319\",\n   \"name\": \"Web Data Compression & Search\",\n   \"prerequisites\": \"Prerequisite: COMP9024.\",\n   \"term\": 2,\n   \"description\": \"Data Compression\"\n },\n {\n   \"courseid\": \"COMP9321\",\n   \"name\": \"Data Services Engineering\",\n   \"prerequisites\": \"Prerequisite: COMP9021 and COMP9311\",\n   \"term\": 1,\n   \"description\": \"This course aims to introduce the student to core concepts and practical skills for engineering the data in Web-service-oriented data-driven applications. Specifically, the course aims to expose students to basic infrastructure for building data services on the Web, including techniques to access and ingest data in internal/external sources, develop software services to curate (e.g. extract, transform, correct, aggregate the data), develop services to apply various analytics and develop services to visualize the data to communicate effectively using data. The course uses the Python programming language as the practical basis for its modules. However, the concepts taught are universal and can be applied to any other web development language/framework\"\n },\n {\n   \"courseid\": \"COMP9322\",\n   \"name\": \"Software Service Design & Eng\",\n   \"prerequisites\": \"Prerequisite: COMP9321.\",\n   \"term\": 2,\n   \"description\": \"The notion of ̢����software as a service̢��� (SaaS) plays a critical role in building distributed, scalable application platforms. This course arms students with the knowledge and expertise to design and engineer services using modern Web technologies. Based on Service Oriented Architecture (SOA) principles, students will be exposed to various design and implementation methodologies, including microservices and their associated design patterns, and API design and managment. In addition, this course will strengthen students̢��� data modeling expertise, covering topics on semantic modelling of both simple and complex structures, and its usage in business analysis. The course will also describe the technical standards and technologies that support semantic data modelling. After completing this course, students will be able to (i) describe different architectural design approaches and their role in engineering software. (ii) apply Web service composition techniques in a concrete setting, (iii) be competent in designing, managing, documenting, testing and securing APIs, (iv) understand techniques for semantic modelling of simple and complex structures, as well as their associated technical standards and technologies\"\n },\n {\n   \"courseid\": \"COMP9323\",\n   \"name\": \"e-Enterprise Project\",\n   \"prerequisites\": \"Prerequisite: COMP9021 and COMP9311 and > 65 WAM\",\n   \"term\": 3,\n   \"description\": \"This course allows students to explore principles, techniques, architectures, and enabling technologies for the development of the different components and layers of complex SaaS systems. In particular, it discusses the processes related to (1) building a large enterprise system in collaboration with other project members, (2) developing software in a culture of participation, (3) developing software using agile software engineering methodologies, (4) integrating a number of separate components to build an integrated system, and (5) developing appropriate testing strategies and methodologies for given projects\"\n },\n {\n   \"courseid\": \"COMP9331\",\n   \"name\": \"Computer Networks&Applications\",\n   \"prerequisites\": \"Corequisite: COMP9024.\",\n   \"term\": 1,\n   \"description\": \"Networking technology overview.  Protocol design and validation using the finite state automata in conjunction with time-lines.  Overview of the IEEE802 network data link protocol standards.  Addressing at the data link and network layers.  Network layer services.  Introduction to routing algorithms such as Distance Vector and Link State.  Congestion control mechanisms.  Internetworking issues in connecting networks.  The Internet Protocol suite overview.  The Internet protocols IPv4 and IPv6.  Address resolution using ARP and RARP.  Transport layer:  issues, transport protocols TCP and UDP.  Application level protocols such as: File.  Transfer Protocol (FTP), Domain Name System (DNS) and Simple Mail Transfer Protocol (SMTP). Introduction to fundamental network security concepts, 802.11 wireless networks and peer to peer networks. There is a substantial network programming component in the assessable material\"\n },\n {\n   \"courseid\": \"COMP9332\",\n   \"name\": \"Network Routing and Switching\",\n   \"prerequisites\": \"Prerequisite: COMP9331.\",\n   \"term\": 2,\n   \"description\": \"This course will focus on the routing and switching architectures, algorithms and protocols for packet switching networks, both connectionless and connection oriented networks (such as IP and ATM networks). Advanced Internet addressing : CIDR, VPN, NAT. In depth discussion of interior and exterior routing protocols, such BGP, OSPF. IP over ATM solutions : such as LANE, Classical IP over ATM. IP switching and MPLS. Mobile IP. Internet Multicasting. Overview of emerging switching and routing technologies, such as optical routing and QoS routing. There is a substantial network programming component in the assessable material, for which C prgramming knowledge is assumed\"\n },\n {\n   \"courseid\": \"COMP9334\",\n   \"name\": \"Systems Capacity Planning\",\n   \"prerequisites\": \"Prerequisite: COMP9021\",\n   \"term\": 1,\n   \"description\": \"Techniques for performance evaluation of distributed systems.  These techniques will then be applied to designing systems to have good performance, and to the analysis of future workloads and the system changes required to cope with them\"\n },\n {\n   \"courseid\": \"COMP9336\",\n   \"name\": \"Mobile Data Networking\",\n   \"prerequisites\": \"Prerequisite: COMP9331.\",\n   \"term\": 2,\n   \"description\": \"This course will examine how mobility affects networks, systems, and applications. It will teach advanced concepts and protocols for managing mobility in TCP/IP networks, improving spectrum and energy efficiency of mobile networking, realizing more direct form of device-to-device communication, enhancing the quality of experience of mobile video, and achieving self-powered wireless communication. Learning emerging device functionalities and features will be part of this course, which requires some basic understanding of mobile device programming, such as Android and Java\"\n },\n {\n   \"courseid\": \"COMP9337\",\n   \"name\": \"Securing Wireless Networks\",\n   \"prerequisites\": \"Prerequisite: COMP9331.\",\n   \"term\": 1,\n   \"description\": \"As wireless technology emerges into the mainstream of the networking and communications markets, security becomes a top priority. This course will explore the security vulnerabilities in wireless networks and cover the fundamental concepts and advanced issues for building sensor networks. The following key concepts will be covered: Wireless LAN Security - Wired Equivalent Privacy (WEP), Wi-Fi Protected Access (WPA), Authentication Servers (RADIUS), 802.11i security standard; Securing Ad-Hoc Networks - MAC layer misbehaviours, secure routing protocols, denial of service attacks, key management, broadcast authentication, secure location discovery, non-traditional security attacks and solutions. This course includes a hands-on laboratory component and a design project\"\n },\n {\n   \"courseid\": \"COMP9414\",\n   \"name\": \"Artificial Intelligence\",\n   \"prerequisites\": \"Corequisite:  COMP9021.\",\n   \"term\": 1,\n   \"description\": \"Overview of Artificial Intelligence. Topics include: the representation of knowledge, search techniques, problem solving, machine learning, expert systems, natural language understanding, computer vision and an Artificial Intelligence programming language (Prolog or LISP). Students may be required to submit simple Art ificial Intelligence programs, or essays on an aspect of A.I, for assessment, in areas such as robotics, computer vision, natural language processing, and machine learning\"\n },\n {\n   \"courseid\": \"COMP9415\",\n   \"name\": \"Computer Graphics\",\n   \"prerequisites\": \"Prerequisite: COMP9024.\",\n   \"term\": 2,\n   \"description\": \"Graphics hardware: scan conversion of lines and polygons. 2D transformations: windowing, clipping, viewports. User interfaces. 3D transformations: perspective transformation, 3D clipping, hidden surface removal, lighting and texture maps. Hierarchical modelling of objects, modelling curves and surfaces with splines and fractals. Graphics standards. Lab: programming assignments\"\n },\n {\n   \"courseid\": \"COMP9417\",\n   \"name\": \"Machine Learning & Data Mining\",\n   \"prerequisites\": \"Prerequisite: (COMP9020 and COMP9021) or COMP9024\",\n   \"term\": 2,\n   \"description\": \"Machine learning is the algorithmic approach to learning from data. This course covers the key techniques in data mining technology, gives their theoretical background and shows their application. Topics include: decision tree algorithms (such as C4.5), regression and model tree algorithms, neural network learning, rule learning (such as association rules), lazy learning, version spaces, evaluating the performance of machine learning algorithms, Bayesian learning and model selection, algorithm-independent learning, ensemble learning, kernel methods, unsupervised learning (such as clustering) and inductive logic programming (relational learning)\"\n },\n {\n   \"courseid\": \"COMP9418\",\n   \"name\": \"Advanced Machine Learning\",\n   \"prerequisites\": \"Prerequisite: COMP9417.\",\n   \"term\": 1,\n   \"description\": \"This course provides an in-depth study of statistical machine learning approaches. The focus will be on methods for learning and inference in structured probabilistic models, with a healthy balance of theory and practice. This course is aimed at students who are willing to be go beyond basic understanding of machine learning. The course provides fundamental support for those willing to intensify their knowledge in the area of big data analytics.<br /><br />It will cover topics on exact and approximate inference in probabilistic graphical models; learning in structured latent variable models; posterior inference in non-parametric models based on Gaussian processes; and relational learning\"\n },\n {\n   \"courseid\": \"COMP9434\",\n   \"name\": \"Robotic Software Architecture\",\n   \"prerequisites\": \"\",\n   \"term\": 3,\n   \"description\": \"\"\n },\n {\n   \"courseid\": \"COMP9444\",\n   \"name\": \"Neural Networks, Deep Learning\",\n   \"prerequisites\": \"Prerequisite: COMP9024.\",\n   \"term\": 3,\n   \"description\": \"Topics chosen from: perceptrons, feedforward neural networks, backpropagation, Hopfield and Kohonen networks, restricted Boltzmann machine and autoencoders, deep convolutional networks for image processing; geometric and complexity analysis of trained neural networks; recurrent networks, language processing, semantic analysis, long short term memory; designing successful applications of neural networks; recent developments in neural networks and deep learning\"\n },\n {\n   \"courseid\": \"COMP9447\",\n   \"name\": \"Security Engineering Workshop\",\n   \"prerequisites\": \"Prerequisite: COMP6441 or COMP6841 or COMP9441\",\n   \"term\": 1,\n   \"description\": \"Applied workshop in computer security and cybercrime: attack, defense, auditing.<br /><br />The course will consist of a weekly seminar followed by a three hour per week workshop and lab session on the seminar topic.  Topics are drawn from data sniffing, firewalls and attacks on firewalls, root-kits, exploits, denial of service attacks, intrusion detection systems, honeypots, malware, digital rights management, cryptanalysis, cross site scripting attacks, code injection attacks, threats and countermeasures, penetration testing, and current topics in security\"\n },\n {\n   \"courseid\": \"COMP9511\",\n   \"name\": \"Human Computer Interaction\",\n   \"prerequisites\": \"\",\n   \"term\": 3,\n   \"description\": \"Provides an introduction to user-system interactions, both analysis and design. The approach is cognitive, focusing on matching user goals with computer technologies. Topics: the human information processing system, models of interaction, strategies for and process of design, and evaluation. Project work is emphasised\"\n },\n {\n   \"courseid\": \"COMP9517\",\n   \"name\": \"Computer Vision\",\n   \"prerequisites\": \"Prerequisite: COMP9024.\",\n   \"term\": 1,\n   \"description\": \"Cameras and Radiometry, local shading models, Colour Vision perception, representation, modelling, linear filters for smoothing, edge detection using concvolution, fourier transform, scale and image pyramids, texture, segmentation by clustering, model fitting and probabilistic methods, tracking and Kalman filters, model-based vision, template matching using classifiers, recognition by relations, applications in robotics, medical imaging, satellite image analysis\"\n },\n {\n   \"courseid\": \"COMP9596\",\n   \"name\": \"Research Project\",\n   \"prerequisites\": \"\",\n   \"term\": 3,\n   \"description\": \"Students in their final semester of study in MIT (8543) have the option of replacing two courses with a 12UOC research project.<br /><br />To be able to enrol in COMP9596, students must meet the follwoing criteria:<br /><br />   1.  Have completed (or have advanced standing in) 72uoc; and<br />   2. Have obtained agreement from a CSE academic supervisor; and<br />   3. Have maintained a distinction level performance in the program.<br /><br />Projects are graded, and students deliver a seminar and submit a written report. More information is available in the Course Outline. Students should seek agreement from a supervisor prior to submitting a Project Nomination form to the CSE Student Office\"\n },\n {\n   \"courseid\": \"COMP9801\",\n   \"name\": \"Ext Design&Analysis of Algo\",\n   \"prerequisites\": \"Prerequisite: a mark of at least 70 in COMP9024.\",\n   \"term\": 2,\n   \"description\": \"As for COMP9101 but in greater depth and breadth\"\n },\n {\n   \"courseid\": \"COMP9814\",\n   \"name\": \"Ext Artificial Intelligence\",\n   \"prerequisites\": \"Corequisite:  COMP9021.\",\n   \"term\": 1,\n   \"description\": \"As for COMP9414 but in greater depth and breadth\"\n },\n {\n   \"courseid\": \"COMP9844\",\n   \"name\": \"Ext Neural Nets, Deep Learning\",\n   \"prerequisites\": \"Prerequisite: 70 WAM and COMP9024.\",\n   \"term\": 3,\n   \"description\": \"As for COMP9444 but in greater depth and breadth\"\n },\n {\n   \"courseid\": \"COMP9900\",\n   \"name\": \"Info Tech Project\",\n   \"prerequisites\": \"Prerequisite: Completion of at least 72 UOC towards MIT program 8543.  Students must be in their final semester of study.\",\n   \"term\": 1,\n   \"description\": \"A capstone software project. Students work in teams to define, implement and evaluate a real-world software system. Most of the work in this course is team-based project work, although there are some introductory lectures on software project management and teamwork strategies. Project teams meet fortnightly with project mentors to report on the progress of the project. Assessment is based on a project proposal, a final project demonstration and report, and on the quality of the software system itself. Students are also required to reflect on their work and to provide peer assessment of their team-mates' contributions to the project\"\n },\n {\n   \"courseid\": \"COMP9945\",\n   \"name\": \"Research Project\",\n   \"prerequisites\": \"\",\n   \"term\": 3,\n   \"description\": \"Students in their final semester of study in MIT (8543) have the option of replacing three courses with a 18UOC research project.<br /><br />To be able to enrol in COMP9945, students must meet the following criteria:<br /><br />   1.  Have completed (or have advanced standing in) 72uoc; and<br />   2. Have obtained agreement from a CSE academic supervisor; and<br />   3. Have maintained a distinction level performance in the program.<br /><br />Projects are graded, and students deliver a seminar and submit a written report. More information is available in the Course Outline. Students should seek agreement from a supervisor prior to submitting a Project Nomination form to the CSE Student Office\"\n },\n {\n   \"courseid\": \"GSOE9210\",\n   \"name\": \"Engineering Decisions\",\n   \"prerequisites\": \"\",\n   \"term\": 3,\n   \"description\": \"The course will provide a proper background for managerial processes and decision making in engineering environments. The lectures will systematise the basic ideas of decision making, while the technical examples will be drawn from the topics representing the range of the Faculty programs. The topics covered are the following: decisions under risk and uncertainty; Bayesian reasoning; competitive decisions as games; recursive decision making; social choice\"\n },\n {\n   \"courseid\": \"GSOE9220\",\n   \"name\": \"Launching a Startup\",\n   \"prerequisites\": \"\",\n   \"term\": 3,\n   \"description\": \"This course aims to provide students with the skills necessary to successfully commercialise ideas. Whilst some aspects of entrepreneurship can be learned from others, research on entrepreneurship education has shown a learn-by-doing approach is most effective. Thus, the course has a strong experiential-learning focus and will incorporate a flipped-classroom model with weekly online topics based on the Lean LaunchPad, which is used by leaders in this space such as Stanford, Berkley and the University of Pennsylvania.<br /><br />During their project, students form small teams, identify potential business opportunities and utilise enquiry based learning to assess the viability of their business model. Upon completion of their project, students pitch their business model and report on their learnings\"\n }\n]","import React from 'react';\n\nconst SearchBox =({searchfield, searchChange}) =>{\n\treturn(\n\t\t<div className = 'pa2'>\n\t\t\t<input \n\t\t\t\tclassName = 'pa3 ba b--green bg-lightest-blue'\n\t\t\t\ttype='search' \n\t\t\t\tplaceholder = 'search course' \n\t\t\t\tonChange = {searchChange}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) =>{\n\treturn(\n\t\t<div style={{overflowY:'scroll', border: '1px solid black', height: '500px'}}>\n\t\t\t{props.children}\n\t\t</div>\n\t);\n};\n\nexport default Scroll;","import React, {Component} from 'react';\nimport CardList from '../components/CardList';\nimport {courses} from '../data/courses';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll'\nimport './App.css';\n\nclass App extends Component {\n\tconstructor(){\n\t\tsuper()\n\t\tthis.state={\n\t\t\tcourses: [],\n\t\t\tsearchfiled: ''\n\t\t}\n\t}\n\n\tcomponentDidMount(){\n\t\tthis.setState({courses: courses});\n\t}\n\n\tonSearchChange = (event) => {\n\t\tthis.setState({searchfiled: event.target.value })\n\t}\n\n\trender(){\n\t\tconst { courses, searchfiled } = this.state;\n\t\tconst filterCourse = courses.filter(item =>{\n\t\t\treturn item.name.toLowerCase().includes(searchfiled.toLowerCase());\n\t\t})\n\n\t\treturn !courses.length ?\n\t\t\t<h1>Loading</h1> :\n\t\t\t(\n\t\t\t\t<div className = 'tc'>\n\t\t\t\t\t<h1 className = 'f1'>Course Recommender</h1>\n\t\t\t\t\t<SearchBox searchChange = {this.onSearchChange}/>\n\t\t\t\t\t<Scroll>\n\t\t\t\t\t\t<CardList courses={filterCourse}/>\n\t\t\t\t\t</Scroll>\n\t\t\t\t</div>\n\t\t\t);\n\t}\n}\n\t\t\n\t\n\t\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\n\t<App />\n\n\t, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}